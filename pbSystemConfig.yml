---
- hosts: localhost
  connection: local
  gather_facts: no

  vars_files:
    - "vars/params.yml"

  collections:
    - vmware.alb

  tasks:

    - name: Create Backup Configuration passphrase
      vmware.alb.avi_backupconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        state: present
        backup_passphrase: "{{ avi_credentials.password }}"
        name: Backup-Configuration
        save_local: true
      tags:
        - system

    - name: Import Root/Intermediate CA
      avi_sslkeyandcertificate:
        avi_credentials: "{{ avi_credentials }}"
        certificate:
          certificate: "{{ lookup('file', item.cert.path) }}"
        type: "SSL_CERTIFICATE_TYPE_CA"
        name: "{{ item.name }}"
      loop: "{{ import_sslkeyandcertificate_ca | from_json }}"
      when:
        - import_sslkeyandcertificate_ca is defined

    - name: Import SSL Keys and Certificates
      avi_sslkeyandcertificate:
        avi_credentials: "{{ avi_credentials }}"
        key: "{{ lookup('file', item.key.path) }}"
        certificate:
          self_signed: "{{ item.cert.self_signed }}"
          certificate: "{{ lookup('file', item.cert.path) }}"
        type: "{{ item.type }}"
        name: "{{ item.name }}"
      loop: "{{ import_sslkeyandcertificate | from_json }}"
      when:
        - import_sslkeyandcertificate is defined

    - name: Create SSL Keys and Certificates
      avi_sslkeyandcertificate:
        avi_credentials: "{{ avi_credentials }}"
        name: "{{ item.name }}"
        format: "{{ item.format }}"
        certificate_base64: "{{ item.certificate_base64 }}"
        enable_ocsp_stapling: "{{ item.enable_ocsp_stapling }}"
        import_key_to_hsm: "{{ item.import_key_to_hsm }}"
        is_federated: "{{ item.is_federated }}"
        key_base64: "{{ item.key_base64 }}"
        type: "{{ item.type }}"
        certificate: "{{ item | community.general.json_query('certificate') }}"
        key_params: "{{ item | community.general.json_query('key_params') }}"
        ocsp_config: "{{ item | community.general.json_query('ocsp_config') }}"
      loop: "{{ sslkeyandcertificate | from_json }}"
      when:
        - sslkeyandcertificate is defined

    - name: Define ntp_servers
      set_fact:
        ntp_servers: "{{ ntp_servers | default([]) + [{ 'server': {'type': 'V4', 'addr': item}}] }}"
      loop: "{{ controller.ntp | from_json }}"
      when:
        - controller.ntp is defined

    - name: Define dns_servers
      set_fact:
        server_list: "{{ server_list | default([]) + [{'type': 'V4', 'addr': item}] }}"
      loop: "{{ controller.dns | from_json }}"
      when:
        - controller.dns is defined

    - name: Define avi_systemconfiguration
      set_fact:
        avi_systemconfiguration:
          global_tenant_config:
            se_in_provider_context: "{{ controller.se_in_provider_context | default('true') }}"
            tenant_access_to_provider_se: "{{ controller.tenant_access_to_provider_se | default('true') }}"
            tenant_vrf: "{{ controller.tenant_vrf | default('false') }}"
          welcome_workflow_complete: true
          ntp_configuration:
            ntp_servers: "{{ ntp_servers }}"
          dns_configuration:
            search_domain: ''
            server_list: "{{ server_list }}"
          email_configuration:
            from_email: "{{ controller.email_configuration | default('test@avicontroller.net') }}"
            smtp_type: SMTP_LOCAL_HOST
      when:
        - ntp_servers is defined
        - server_list is defined

    - name: Configure Avi System parameters - with portal cert
      vmware.alb.avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        portal_configuration:
          sslkeyandcertificate_refs:
            - "/api/sslkeyandcertificate/?name={{ portal_configuration.sslkeyandcertificate_ref }}"
        global_tenant_config: "{{ avi_systemconfiguration.global_tenant_config }}"
        dns_configuration: "{{ avi_systemconfiguration.dns_configuration }}"
        ntp_configuration: "{{ avi_systemconfiguration.ntp_configuration }}"
        email_configuration: "{{ avi_systemconfiguration.email_configuration }}"
        welcome_workflow_complete: "{{ avi_systemconfiguration.welcome_workflow_complete }}"
        default_license_tier: "ENTERPRISE"
      when:
        - avi_systemconfiguration is defined
        - portal_configuration.sslkeyandcertificate_ref is defined
        - sslkeyandcertificate is defined
      tags:
        - system

    - name: Configure Avi System parameters - without portal cert
      vmware.alb.avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        global_tenant_config: "{{ avi_systemconfiguration.global_tenant_config }}"
        dns_configuration: "{{ avi_systemconfiguration.dns_configuration }}"
        ntp_configuration: "{{ avi_systemconfiguration.ntp_configuration }}"
        email_configuration: "{{ avi_systemconfiguration.email_configuration }}"
        welcome_workflow_complete: "{{ avi_systemconfiguration.welcome_workflow_complete }}"
        default_license_tier: "ENTERPRISE"
      when:
        - avi_systemconfiguration is defined
        - portal_configuration.sslkeyandcertificate_ref is undefined
      tags:
        - system

    - name: Create HTTP health monitor
      vmware.alb.avi_healthmonitor:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        http_monitor:
          http_request: "{{ item.http_request }}"
          http_response_code: "{{ item.http_response_code }}"
        receive_timeout: "{{ item.receive_timeout }}"
        failed_checks: "{{ item.failed_checks }}"
        send_interval: "{{ item.send_interval }}"
        successful_checks: "{{ item.successful_checks }}"
        type: "{{ item.type }}"
      loop: "{{ healthMonitor }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - healthMonitor is defined
        - item.type == "HEALTH_MONITOR_HTTP"
      tags:
        - health_monitor

    - name: Create alertscriptconfig
      avi_alertscriptconfig:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        action_script: "{{ item.action_script }}"
      loop: "{{ alertscriptconfig | from_json }}"
      when:
        - alertscriptconfig is defined

    - name: Create certificatemanagementprofile
      avi_certificatemanagementprofile:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        run_script_ref: "{{ item.run_script_ref }}"
        script_params: "{{ item.script_params }}"
      loop: "{{ certificatemanagementprofile | from_json }}"
      when:
        - certificatemanagementprofile is defined

    - name: Modify Default Network TCP Profile - reorder threshold
      vmware.alb.avi_networkprofile:
        avi_api_update_method: "patch"
        avi_api_patch_op: "replace"
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        tenant: "{{ tenant_ref | default('admin') }}"
        name: "System-TCP-Proxy"
        profile:
          type: PROTOCOL_TYPE_TCP_PROXY
          tcp_proxy_profile:
            automatic: False
            reorder_threshold: 8
      when:
        - no_access_vcenter.environment == "vmc"
      ignore_errors: true

    - name: update controllerproperties.shared_ssl_certificates
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: patch
        timeout: 300
        path: controllerproperties
        data: {"patch": {"shared_ssl_certificates": true}}