---
- hosts: localhost
  connection: local
  gather_facts: no

  collections:
    - vmware.alb

  tasks:

    - name: Get Clouds list
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        path: cloud
      register: cloudResults

    - name: retrieve cloud uuid
      no_log: True
      set_fact:
        cloud_nsxt_uuid: "{{ item.uuid }}"
      tags:
        - cloud
        - nsxtApi
      loop: "{{ cloudResults.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - item.name == nsxt.cloud.name

    - name: python workaround to retrieve tier1s for avi vip - NSXT
      command: python3 ../python/retrieveNsxtTier1s.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsx_avi_cloudconnectoruser_uuid }}" "{{ item.tier1 }}"
      ignore_errors: no
      loop: "{{ nsxt.networks_data }}"
      loop_control:
        label: "{{ item.display_name }}"
      register: register_nsxt_tier1s_vip_json
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - nsxt.networks_data is defined

    - set_fact:
        nsxt_tier1s_vip: "{{ nsxt_tier1s_vip | default([]) + [item.stdout | from_json] }}"
      loop: "{{ register_nsxt_tier1s_vip_json.results }}"
      no_log: True
      tags:
        - cloud
        - nsxtApi
      when:
        - register_nsxt_tier1s_vip_json.results is defined

    - name: Create vsvip for dns - NSXT
      vmware.alb.avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.0.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        vrf_context_ref: "/api/vrfcontext/?name={{ item.0.vrf_ref }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        #tier1_lr: "{{ item.1.1.id | default(omit) }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.0.name + '.' + nsxt.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.1.0.display_name }}"
              subnet:
                mask: "{{ item.1.0.avi_ipam_vip.cidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ item.1.0.avi_ipam_vip.type | default('V4') }}"
                  addr: "{{ item.1.0.avi_ipam_vip.cidr.split('/')[0] }}"
      loop: "{{ nsxt.virtual_services | from_json | community.general.json_query('dns') | product(nsxt.networks_data | from_json | zip(nsxt_tier1s_vip) | list) }}"
      loop_control:
        label: "vs {{ item.0.name }} configured with network {{ item.0.network_ref }} ; network {{ item.1.0.display_name }} ; tier1 named {{ item.1.1.name }}"
      when:
        - nsxt.virtual_services is defined
        - nsxt.networks_data is defined
        - nsxt_tier1s_vip is defined
        - item.0.network_ref == item.1.0.display_name
        - nsxt.cloud.name is defined
        - nsxt.domains is defined
      tags:
        - vsvip
        - vs

    - name: Create vsvip for http - NSXT
      avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.0.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        vrf_context_ref: "/api/vrfcontext/?name={{ item.0.vrf_ref }}"
        #tier1_lr: "{{ item.1.1.id }} | default(omit) }}"
        dns_info:
          - fqdn: "{{ item.dns_info.0 | default(item.0.name + '.' + nsxt.domains.0.name) }}"
            type: "{{ item.dns_info.0.type | default('DNS_RECORD_A') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.1.0.display_name }}"
              subnet:
                mask: "{{ item.1.0.avi_ipam_vip.cidr.split('/')[1] }}"
                ip_addr:
                  type: "{{ item.1.0.avi_ipam_vip.type | default('V4') }}"
                  addr: "{{ item.1.0.avi_ipam_vip.cidr.split('/')[0] }}"
      loop: "{{ nsxt.virtual_services | from_json | community.general.json_query('http') | product(nsxt.networks_data | from_json | zip(nsxt_tier1s_vip) | list) }}"
      loop_control:
        label: "vs {{ item.0.name }} configured with network {{ item.0.network_ref }} ; network {{ item.1.0.display_name }} ; tier1 named {{ item.1.1.name }}"
      when:
        - nsxt.virtual_services is defined
        - nsxt.networks_data is defined
        - nsxt_tier1s_vip is defined
        - item.0.network_ref == item.1.0.display_name
        - nsxt.cloud.name is defined
        - nsxt.domains is defined
      tags:
        - vsvip
        - vs

    - name: python workaround to retrieve tier1s details for each pool - NSXT
      command: python3 ../python/retrieveNsxtTier1s.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsx_avi_cloudconnectoruser_uuid }}" "{{ item.tier1 }}"
      ignore_errors: no
      loop: "{{ nsxt.pools }}"
      loop_control:
        label: "{{ item.name }}"
      register: register_nsxt_tier1s_pools_json
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - nsxt.pools is defined

    - name: Create a list variable for each tier1 of each pools
      set_fact:
        nsxt_tier1s_pools: "{{ nsxt_tier1s_pools | default([]) + [item.stdout | from_json] }}"
      loop: "{{ register_nsxt_tier1s_pools_json.results }}"
      no_log: True
      tags:
        - cloud
        - nsxtApi
      when:
        - register_nsxt_tier1s_pools_json.results is defined

    - name: Create a list variable for NSXT pool Group only
      set_fact:
        nsxt_pools: "{{ nsxt_pools | default([]) + [item] }}"
      loop: "{{ nsxt.pools | from_json }}"
      when:
        - nsxt.pools is defined
        - item.type == "nsx-group-based"

    - name: retrieve details for NSXT Group - NSXT
      command: python3 ../python/retrieveNsxtGroups.py "{{ controller.aviCredsJsonFile }}" "{{ cloud_nsxt_uuid }}" "{{ item.name }}"
      ignore_errors: no
      loop: "{{ nsxt_pools }}"
      register: register_nsxt_groups_json
      when:
        - controller.aviCredsJsonFile is defined
        - cloud_nsxt_uuid is defined
        - nsxt.pools is defined
        - item.type == "nsx-group-based"
      tags:
        - pool
        - vs

    - name: NSXT Group - Saving Groups detail to variable
      set_fact:
        nsxt_groups: "{{ nsxt_groups | default([]) + [item.stdout | from_json] }}"
      loop: "{{ register_nsxt_groups_json.results }}"
      when:
        - register_nsxt_groups_json.results is defined

    - name: create pool based on NSXT group - NSXT
      vmware.alb.avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.0.0.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        lb_algorithm: "{{ item.0.0.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        vrf_ref: "/api/vrfcontext/?name={{ item.0.0.vrf_ref }}"
        tier1_lr: "{{ item.1.id | default(omit) }}"
        nsx_securitygroup:
          - "{{ item.0.1.id }}"
        application_persistence_profile_ref: "/api/applicationpersistenceprofile?name={{ item.0.0.application_persistence_profile_ref | default('System-Persistence-Client-IP') }}"
        default_server_port: "{{ item.0.0.default_server_port }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ item.0.0.health_monitor_refs | default('hm1') }}"
      loop: "{{ nsxt_pools | zip(nsxt_groups) | product(nsxt_tier1s_pools) }}"
      loop_control:
        label: "vs {{ item.0.0.name }} configured with tier1 {{ item.0.0.tier1 }} ; nsx_group {{ item.0.1.name }} ; tier1 named {{ item.1.name }}"
      when:
        - nsxt_pools is defined
        - nsxt_groups is defined
        - nsxt_tier1s_pools is defined
        - item.0.0.tier1 == item.1.name
      tags:
        - pool
        - vs

    - name: Create a list variable for IP based pool only
      set_fact:
        standard_pool: "{{ standard_pool | default([]) + [item] }}"
      loop: "{{ nsxt.pools | from_json }}"
      when:
        - nsxt.pools is defined
        - item.type != "nsx-group-based"

    - name: Create/update pool without server (NSX-T)
      avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.0.0.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        vrf_ref: "/api/vrfcontext/?name={{ item.0.0.vrf_ref }}"
        tenant_ref: "/api/tenant?name={{ tenant_ref | default('admin') }}"
        tier1_lr: "{{ item.1.id | default(omit) }}"
        default_server_port: "{{ item.0.0.default_server_port }}"
        lb_algorithm: "{{ item.0.0.lb_algorithm | default('LB_ALGORITHM_ROUND_ROBIN') }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ item.0.0.health_monitor_refs | default('hm1') }}"
        servers:
          - ip:
              addr: "{{ item.0.1 }}"
              type: 'V4'
      loop: "{{ standard_pool | subelements('avi_app_server_ips') | product(nsxt_tier1s_pools) }}"
      loop_control:
        label: "pool {{ item.0.0.name }} configured with tier1 {{ item.0.0.tier1 }} ; server IP: {{ item.0.1 }} ; tier1 named {{ item.1.name }}"
      when:
        - nsxt.pools is defined
        - item.0.0.tier1 == item.1.name
      tags:
        - pool
        - vs

    - name: Create an empty list of pool group(s)
      set_fact:
        vcenter_pool_groups: []
      when:
        - nsxt.cloud.pool_groups is undefined or nsxt.cloud.pool_groups | from_json | length == 0

    - name: Create/update pool group
      vmware.alb.avi_poolgroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.0.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant: "{{ item.0.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.0.tenant_ref | default('admin') }}"
        members:
          - ratio: "{{ item.1.ratio | default(omit) }}"
            pool_ref: "/api/pool?name={{ item.1.name | default(omit) }}"
      loop: "{{ vcenter_pool_groups | subelements('members') }}"
      loop_control:
        label: "Configure pool group called {{ item.0.name }} in tenant {{ item.0.tenant_ref | default('admin') }}; pool name: {{ item.1.name }}"
      when:
        - vcenter_pool_groups is defined
        - nsxt.cloud.name is defined
      tags:
        - pool_group

    - name: Create HTTP Policy(ies)
      community.network.avi_httppolicyset:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        http_request_policy: "{{ item.http_request_policy | default(omit) }}"
        http_response_policy: "{{ item.http_response_policy | default(omit) }}"
      loop: "{{ httppolicyset | from_json }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - httppolicyset is defined

    - name: Create DNS Virtualservice
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        vrf_ref: "/api/vrfcontext/?name={{ item.0.0.vrf_ref }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-DNS') }}"
        network_profile_ref: "/api/networkprofile/?name={{ item.network_profile_ref | default('System-UDP-Per-Pkt') }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        services: "{{ item.services }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
      loop: "{{ nsxt.virtual_services | from_json | community.general.json_query('dns') }}"
      loop_control:
        label: "Creation of VS DNS called {{ item.name }}"
      when:
        - nsxt.virtual_services is defined
        - nsxt.cloud.name is defined
      tags:
        - vsDns
        - vs

    - name: Update system config with first DNS VS - NSXT
      vmware.alb.avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        dns_virtualservice_refs: "/api/virtualservice/?name={{ nsxt.virtual_services | from_json | community.general.json_query('dns[*].name | [0]') }}"
      tags:
        - vsDns
        - vs
      when:
        - nsxt.virtual_services is defined

    - name: Create HTTP Virtualservice NSXT Group (based on vsvip)
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        vrf_ref: "/api/vrfcontext/?name={{ item.0.0.vrf_ref }}"
        enabled: "{{ item.enabled | default('true') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-Secure-HTTP') }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
        pool_ref: "/api/pool?name={{ item.pool_ref }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        analytics_policy:
          udf_log_throttle: 10
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 0
            throttle: 10
            enabled: true
          all_headers: true
      loop: "{{ nsxt.virtual_services | from_json | community.general.json_query('http') }}"
      loop_control:
        label: "Creation of VS HTTP called {{ item.name }}"
      when:
        - nsxt.virtual_services is defined
        - nsxt.cloud.name is defined
      tags:
        - vsHttp
        - vs

    - name: Wait for the First VS to be ready - NSXT
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice-inventory
        tenant: "{{ item.tenant_ref | default('admin') }}"
      register: register_status_vs
      until: register_status_vs.obj.results.0.runtime.oper_status.state == "OPER_UP"
      retries: 60
      delay: 30
      when:
        - nsxt.virtual_services is defined
        - nsxt.cloud.name is defined
      ignore_errors: yes
      tags:
        - vsHttp
        - vs