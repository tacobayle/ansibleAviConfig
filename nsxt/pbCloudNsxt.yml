---
- hosts: localhost
  connection: local
  gather_facts: no

  collections:
    - vmware.alb

  tasks:

    - name: Create Avi DNS provider Without donain names - NSXT
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: dns-avi-nsxt
        type: IPAMDNS_TYPE_INTERNAL_DNS
      tags:
        - dns

    - name: Update Avi DNS provider With donain names - NSXT
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item.name }}"
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: dns-avi-nsxt
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ nsxt.domains }}"
      when:
        - nsxt.domains is defined
      tags:
        - dns

    - name: python workaround to retrieve transport zone id - NSXT
      command: python3 ../python/retrieveNsxtTransportZoneId.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsx_avi_cloudconnectoruser_uuid }}" "{{ nsxt.transport_zone.name }}"
      ignore_errors: no
      register: register_nsxt_transport_zone_id
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - nsxt.transport_zone.name is defined

    - name: Debug variable
      debug:
        msg: "{{ controller.aviCredsJsonFile }}"

    - name: Debug variable
      debug:
        msg: "{{ nsx_server }}"

    - name: Debug variable
      debug:
        msg: "{{ nsx_avi_cloudconnectoruser_uuid }}"

    - name: Debug variable
      debug:
        msg: "{{ nsxt.network_management.tier1 }}"

    - name: python workaround to retrieve tier1s for mgt - NSXT
      command: python3 ../python/retrieveNsxtTier1s.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsx_avi_cloudconnectoruser_uuid }}" "{{ nsxt.network_management.tier1 }}"
      ignore_errors: no
      register: register_nsxt_tier1_mgmt_json
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - nsxt.network_management.tier1 is defined

    - set_fact:
        nsxt_tier1_mgmt: "{{ register_nsxt_tier1_mgmt_json.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - register_nsxt_tier1_mgmt_json.stdout is defined

    - name: python workaround to retrieve tier1s for avi vip - NSXT
      command: python3 ../python/retrieveNsxtTier1s.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsx_avi_cloudconnectoruser_uuid }}" "{{ item.tier1 }}"
      ignore_errors: no
      loop: "{{ nsxt.networks_data }}"
      loop_control:
        label: "{{ item.display_name }}"
      register: register_nsxt_tier1s_vip_json
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - nsxt.networks_data is defined

    - set_fact:
        nsxt_tier1s_vip: "{{ nsxt_tier1s_vip | default([]) + [item.stdout | from_json] }}"
      loop: "{{ register_nsxt_tier1s_vip_json.results }}"
      no_log: True
      tags:
        - cloud
        - nsxtApi
      when:
        - register_nsxt_tier1s_vip_json.results is defined

    - name: python workaround to retrieve segment details for avi management - NSXT
      command: python3 ../python/retrieveNsxtSegment.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsx_avi_cloudconnectoruser_uuid }}" "{{ register_nsxt_transport_zone_id.stdout }}" "{{ nsxt.network_management.name }}"
      ignore_errors: no
      register: register_nsxt_segment_mgmt_json
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - register_nsxt_transport_zone_id.stdout is defined
        - nsxt.network_management.name is defined

    - set_fact:
        nsxt_segment_mgmt: "{{ register_nsxt_segment_mgmt_json.stdout | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - register_nsxt_segment_mgmt_json.stdout is defined

    - name: python workaround to retrieve segment details for avi vip - NSXT
      no_log: True
      command: python3 ../python/retrieveNsxtSegment.py "{{ controller.aviCredsJsonFile }}" "{{ nsx_server }}" "{{ nsx_avi_cloudconnectoruser_uuid }}" "{{ register_nsxt_transport_zone_id.stdout }}" "{{ item.display_name }}"
      ignore_errors: no
      loop: "{{ nsxt.networks_data }}"
      register: register_nsxt_segments_vip_json
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsx_server is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - register_nsxt_transport_zone_id.stdout is defined
        - nsxt.networks_data is defined

    - set_fact:
        nsxt_segments_vip: "{{ nsxt_segments_vip | default([]) + [item.stdout | from_json] }}"
      loop: "{{ register_nsxt_segments_vip_json.results }}"
      no_log: True
      tags:
        - cloud
        - nsxtApi
      when:
        - register_nsxt_segments_vip_json.results is defined

    - name: Defining tier1_lrs list
      set_fact:
        tier1_lrs: "{{ tier1_lrs | default([]) + [{ 'tier1_lr_id': item.0.id, 'segment_id': item.1.id }] }}"
      loop: "{{ nsxt_tier1s_vip | zip(nsxt_segments_vip) | list }}"
      when:
        - nsxt_tier1s_vip is defined
        - nsxt_segments_vip is defined

    - name: Configure Avi Cloud - NSXT
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ nsxt.cloud.name }}"
        vtype: CLOUD_NSXT
        nsxt_configuration:
          nsxt_url: "{{ nsx_server }}"
          vpc_mode: "{{ nsxt.cloud.vpc_mode | default(omit) }}"
          site_id: default
          enforcementpoint_id: default
          domain_id: default
          automate_dfw_rules: false
          management_network_config:
            tz_type: OVERLAY
            transport_zone: "{{ register_nsxt_transport_zone_id.stdout }}"
            overlay_segment:
              tier1_lr_id: "{{ nsxt_tier1_mgmt.id }}"
              segment_id: "{{ nsxt_segment_mgmt.id }}"
          data_network_config:
            tz_type: OVERLAY
            transport_zone: "{{ register_nsxt_transport_zone_id.stdout }}"
            tier1_segment_config:
              segment_config_mode: TIER1_SEGMENT_MANUAL
              manual:
                tier1_lrs: "{{ tier1_lrs }}"
          nsxt_credentials_ref: "/api/cloudconnectoruser/{{ nsx_avi_cloudconnectoruser_uuid }}"
        dhcp_enabled: "{{ nsxt.cloud.dhcp_enabled }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name=dns-avi-nsxt"
        obj_name_prefix: "{{ nsxt.cloud.obj_name_prefix | default('AVINSXT') }}"
      register: output_cloud_nsxt
      when:
        - nsxt.cloud.name is defined
        - nsxt.cloud.dhcp_enabled is defined
        - nsx_server is defined
        - register_nsxt_transport_zone_id.stdout is defined
        - nsxt_tier1_mgmt.id is defined
        - nsxt_segment_mgmt.id is defined
        - tier1_lrs is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
        - nsxt.network_management is defined
      tags:
        - cloud

    - set_fact:
        cloud_nsxt_uuid: "{{ output_cloud_nsxt.obj.uuid }}"
      when:
        - output_cloud_nsxt.obj.uuid is defined
      tags:
        - cloud

    - name: sleep for 20 seconds and continue with play
      wait_for: timeout=20
      when:
        - nsxt.cloud.name is defined
      tags:
        - cloud

    - name: python workaround to retrieve vcenter content library info - NSXT
      command: python3 ../python/retrieveNsxtVcentersLibrary.py "{{ controller.aviCredsJsonFile }}" "{{ item.0.vsphere_server }}" "{{ item.1 }}" "{{ item.0.content_library }}"
      ignore_errors: no
      register: register_vcenter_content_libraries_json
      loop: "{{ nsxt.vcenters_details | zip(vcenters_avi_cloudconnectoruser_uuids) | list }}"
      tags:
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - nsxt.vcenters_details is defined
        - vcenters_avi_cloudconnectoruser_uuids is defined

    - set_fact:
        vcenter_content_libraries: "{{ vcenter_content_libraries | default([]) + [item.stdout | from_json] }}"
      no_log: True
      loop: "{{ register_vcenter_content_libraries_json.results }}"
      when:
        - register_vcenter_content_libraries_json.results is defined

    - name: Configure Vcenter Servers for NSXT cloud - NSXT
      avi_vcenterserver:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vcenter-{{ my_idx }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        vcenter_url: "{{ item.0.vsphere_server }}"
        content_lib:
          id: "{{ item.1.id }}"
        vcenter_credentials_ref: "/api/cloudconnectoruser/{{ item.2 }}"
      register: register_avi_vcenterservers
      loop: "{{ nsxt.vcenters_details | zip(vcenter_content_libraries, vcenters_avi_cloudconnectoruser_uuids) | list }}"
      loop_control:
        index_var: my_idx
      tags:
        - cloud
      when:
        - nsxt.cloud.name is defined
        - nsxt.vcenters_details is defined
        - vcenter_content_libraries is defined
        - vcenters_avi_cloudconnectoruser_uuids is defined

    - set_fact:
        nsxt_vcenters_uuids: "{{ nsxt_vcenters_uuids | default([]) + [item.obj.uuid] }}"
      no_log: True
      loop: "{{ register_avi_vcenterservers.results }}"
      when:
        - register_avi_vcenterservers.results is defined

    - name: sleep for 20 seconds and continue with play
      wait_for: timeout=20
      when:
        - nsxt.cloud.name is defined
      tags:
        - cloud

    - name: get Network details - NSXT
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: register_avi_api_session_networks
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined

    - name: Retrieve Network Mgt Uuid - NSXT
      set_fact:
        network_mgmt_uuid: "{{ item.uuid }}"
      loop: "{{ register_avi_api_session_networks.obj.results }}"
      loop_control:
        label: "{{ item.name }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined
        - item.name == nsxt.network_management.name

    - name: Define usable_networks for IPAM with MGMT network - NSXT
      set_fact:
        usable_networks: "{{ usable_networks | default([]) + [{'nw_ref': '/api/network/' + network_mgmt_uuid }] }}"
      when:
        - nsxt.cloud.dhcp_enabled == false
        - network_mgmt_uuid is defined

    - name: Debug
      debug:
        msg: "{{ usable_networks }}"
      when:
        - nsxt.cloud.dhcp_enabled == false

    - name: Set IP details of Mgmt Network - NSXT
      set_fact:
        configured_subnets_mgmt:
          - prefix:
              mask: "{{ nsxt_segment_mgmt.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ nsxt.network_management.type | default('V4') }}"
                addr: "{{ nsxt_segment_mgmt.cidr.split('/')[0] }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ nsxt.network_management.type | default('V4') }}"
                    addr: "{{ nsxt.network_management.avi_ipam_pool_se.split('-')[0] }}"
                  end:
                    type: "{{ nsxt.network_management.type | default('V4') }}"
                    addr: "{{ nsxt.network_management.avi_ipam_pool_se.split('-')[1] }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt.cloud.dhcp_enabled == false
        - nsxt.network_management.avi_ipam_pool_se is defined

    - name: Update Mgmt Network - NSXT
      vmware.alb.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ network_mgmt_uuid | default(omit) }}"
        name: "{{ nsxt.network_management.name }}"
        dhcp_enabled: "{{ nsxt.cloud.dhcp_enabled }}"
        exclude_discovered_subnets: true
        configured_subnets: "{{ configured_subnets_mgmt }}"
      when:
        - nsxt.cloud.dhcp_enabled == false
        - nsxt.cloud.name is defined
        - nsxt.network_management.name is defined
        - configured_subnets_mgmt is defined
      tags:
        - cloud

    - name: Set IP details of Mgmt Network - DHCP - NSXT
      set_fact:
        configured_subnets_mgmt_dhcp:
          - prefix:
              mask: "{{ nsxt_segment_mgmt.cidr.split('/')[1] }}"
              ip_addr:
                type: "{{ nsxt.network_management.type | default('V4') }}"
                addr: "{{ nsxt_segment_mgmt.cidr.split('/')[0] }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt.cloud.dhcp_enabled == true
        - nsxt.network_management.avi_ipam_pool_se is defined

    - name: Update Mgmt Network - NSXT
      vmware.alb.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ network_mgmt_uuid | default(omit) }}"
        name: "{{ nsxt.network_management.display_name }}"
        dhcp_enabled: "{{ nsxt.cloud.dhcp_enabled }}"
        exclude_discovered_subnets: true
        configured_subnets: "{{ configured_subnets_mgmt_dhcp }}"
      when:
        - nsxt.cloud.dhcp_enabled == true
        - nsxt.cloud.name is defined
        - nsxt.network_management.display_name is defined
        - configured_subnets_mgmt_dhcp is defined
      tags:
        - cloud

    - name: get Network details - NSXT
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: network
        params:
          page_size: -1
      register: register_avi_api_session_networks
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined

    - name: Retrieve Network Vip Uuid - NSXT
      set_fact:
        networks_vip_uuids: "{{ networks_vip_uuids | default([]) + [item.1.uuid] }}"
      loop: "{{ nsxt.networks_data  | from_json | product(register_avi_api_session_networks.obj.results) | list }}"
      loop_control:
        label: "{{ item.0.display_name }} tested against Avi Network name {{ item.1.display_name }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - nsxt is defined
        - item.0.display_name == item.1.name

    - name: Define configured_subnets for VIP networks - NSXT
      set_fact:
        configured_subnets: "{{ configured_subnets | default([]) + [[{'prefix': {'mask': item.1.cidr.split('/')[1], 'ip_addr': {'type': item.0.type | default('V4'), 'addr': item.1.cidr.split('/')[0] }}, 'static_ip_ranges': [{'type': 'STATIC_IPS_FOR_SE', 'range': {'begin': {'type': item.0.type | default('V4'), 'addr': item.0.avi_ipam_pool_se.split('-')[0]}, 'end': {'type': item.0.type | default('V4'), 'addr': item.0.avi_ipam_pool_se.split('-')[1]} } }]}, {'prefix': {'mask': item.0.avi_ipam_vip.cidr.split('/')[1], 'ip_addr': {'type': item.0.avi_ipam_vip.type | default('V4'), 'addr': item.0.avi_ipam_vip.cidr.split('/')[0] }}, 'static_ip_ranges': [{'type': 'STATIC_IPS_FOR_VIP', 'range': {'begin': {'type': item.0.avi_ipam_vip.type | default('V4'), 'addr': item.0.avi_ipam_vip.pool.split('-')[0]}, 'end': {'type': item.0.avi_ipam_vip.type | default('V4'), 'addr': item.0.avi_ipam_vip.pool.split('-')[1]} } }]}]] }}"
      loop: "{{ nsxt.networks_data | from_json |  zip(nsxt_segments_vip) | list }}"
      when:
        - nsxt.networks_data is defined
        - nsxt_segments_vip is defined

    - name: Define usable_networks for IPAM with VIP networks - NSXT
      set_fact:
        usable_networks: "{{ usable_networks | default([]) + [{'nw_ref': '/api/network/' + item }] }}"
      loop: "{{ networks_vip_uuids }}"
      when:
        - networks_vip_uuids is defined

    - name: Debug
      debug:
        msg: "{{ usable_networks }}"

    - name: Update Vip Network - NSXT
      vmware.alb.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        uuid: "{{ item.1 | default(omit) }}"
        name: "{{ item.0.display_name }}"
        dhcp_enabled: "{{ nsxt.cloud.dhcp_enabled }}"
        exclude_discovered_subnets: true
        configured_subnets: "{{ item.2 }}"
        vrf_context_ref: "/api/vrfcontext/?name={{ item.0.tier1 }}"
      loop: "{{  nsxt.networks_data | from_json | zip(networks_vip_uuids, configured_subnets) | list }}"
      register: register_avi_api_session_networks
      when:
        - nsxt.cloud.name is defined
        - nsxt.cloud.dhcp_enabled is defined
        - nsxt.networks_data is defined
        - networks_vip_uuids is defined
        - configured_subnets is defined
      tags:
        - cloud

    - name: Create/update Avi IPAM - NSXT
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        internal_profile:
          usable_networks: "{{ usable_networks }}"
        name: ipam-avi-nsxt
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - usable_networks is defined
      tags:
        - cloud

    - name: sleep for 20 seconds and continue with play
      wait_for: timeout=20
      when:
        - nsxt.cloud.name is defined
      tags:
        - cloud

    - name: Update vrf with default route for VIP network - NSXT
      vmware.alb.avi_vrfcontext:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        tenant_ref: "/api/tenant?name={{ item.0.tenant_ref | default('admin') }}"
        name: "{{ item.0.tier1 }}"
        static_routes:
          - prefix:
              ip_addr:
                addr: "0.0.0.0"
                type: "{{ item.0.type | default('V4') }}"
              mask: "0"
            next_hop:
              addr: "{{ item.1.gateway.split('/')[0] }}"
              type: "{{ item.0.type | default('V4') }}"
            route_id: "1"
      loop: "{{ nsxt.networks_data | from_json | zip (nsxt_segments_vip) | list }}"
      when:
        - nsxt.cloud.name is defined
        - nsxt.networks_data is defined
        - nsxt_segments_vip is defined
      tags:
        - cloud

    - name: Update Avi Cloud for NSXT
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ nsxt.cloud.name}}"
        vtype: CLOUD_NSXT
        nsxt_configuration:
          nsxt_url: "{{ nsx_server }}"
          vpc_mode: "{{ nsxt.cloud.vpc_mode | default(omit) }}"
          site_id: default
          enforcementpoint_id: default
          domain_id: default
          automate_dfw_rules: false
          management_network_config:
            tz_type: OVERLAY
            transport_zone: "{{ register_nsxt_transport_zone_id.stdout }}"
            overlay_segment:
              tier1_lr_id: "{{ nsxt_tier1_mgmt.id }}"
              segment_id: "{{ nsxt_segment_mgmt.id }}"
          data_network_config:
            tz_type: OVERLAY
            transport_zone: "{{ register_nsxt_transport_zone_id.stdout }}"
            tier1_segment_config:
              segment_config_mode: TIER1_SEGMENT_MANUAL
              manual:
                tier1_lrs: "{{ tier1_lrs }}"
          nsxt_credentials_ref: "/api/cloudconnectoruser/{{ nsx_avi_cloudconnectoruser_uuid }}"
        dhcp_enabled: "{{ nsxt.cloud.dhcp_enabled }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name=dns-avi-nsxt"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name=ipam-avi-nsxt"
        obj_name_prefix: "{{ nsxt.cloud.obj_name_prefix | default('AVINSXT') }}"
      register: output_cloud_nsxt
      when:
        - nsxt.cloud.name is defined
        - nsxt.cloud.dhcp_enabled is defined
        - nsx_server is defined
        - register_nsxt_transport_zone_id.stdout is defined
        - nsxt_tier1_mgmt.id is defined
        - nsxt_segment_mgmt.id is defined
        - tier1_lrs is defined
        - nsx_avi_cloudconnectoruser_uuid is defined
      tags:
        - cloud

    - name: sleep for 20 seconds and continue with play
      wait_for: timeout=20
      when:
        - nsxt.cloud.name is defined
      tags:
        - cloud

    - name: Run a python script against a specific cloud - this takes several minutes
      command: python3 ../python/retrieveCloudStatus.py "{{ controller.aviCredsJsonFile }}" "{{ cloud_nsxt_uuid }}"
      register: register_cloud_status
      until: register_cloud_status.stdout == "IMG_GEN_COMPLETE"
      retries: 30
      delay: 120
      ignore_errors: yes
      when:
        - controller.aviCredsJsonFile is defined
        - cloud_nsxt_uuid is defined
      tags:
        - cloud

    - name: python workaround to retrieve folders uuid  - NSXT
      command: "python3 ../python/retrieveNsxtVcenterFolders.py {{ controller.aviCredsJsonFile }} {{ cloud_nsxt_uuid }} {{ nsxt_vcenters_uuids }} {{ item.vcenter_folder }}"
      ignore_errors: no
      register: register_vcenter_folders_json
      loop: "{{ nsxt.service_engine_groups | from_json }}"
      tags:
        - cloud
        - nsxtApi
      when:
        - controller.aviCredsJsonFile is defined
        - cloud_nsxt_uuid is defined
        - nsxt_vcenters_uuids is defined
        - nsxt.service_engine_groups is defined

    - name: Folders - Saving folders detail variable
      set_fact:
        vcenter_folders_uuids: "{{ vcenter_folders_uuids | default([]) + [item.stdout | from_json] }}"
      loop: "{{ register_vcenter_folders_json.results }}"
      when:
        - register_vcenter_folders_json.results is defined

    - name: Modify/Creating SE group - NSXT
      vmware.alb.avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ nsxt.cloud.name }}"
        avi_api_update_method: put
        name: "{{ item.0.name }}"
        ha_mode: "{{ item.0.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.0.min_scaleout_per_vs | default(omit) }}"
        max_scaleout_per_vs: "{{ item.0.max_scaleout_per_vs | default(omit) }}"
        max_cpu_usage: "{{ item.0.max_cpu_usage | default(omit) }}"
        min_cpu_usage: "{{ item.0.min_cpu_usage | default(omit) }}"
        vs_scaleout_timeout: "{{ item.0.vs_scaleout_timeout | default(omit) }}"
        buffer_se: "{{ item.0.buffer_se | default(omit) }}"
        vcenters: "{{ item.1 }}"
        extra_shared_config_memory: "{{ item.0.extra_shared_config_memory | default(omit) }}"
        vcpus_per_se: "{{ item.0.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.0.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.0.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.0.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.0.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.0.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.0.auto_rebalance_criteria | default(omit) }}"
      loop: "{{ nsxt.service_engine_groups | from_json | zip(vcenter_folders_uuids) | list }}"
      loop_control:
        label: "Modifying/creating SE group called {{ item.0.name }}"
      when:
        - nsxt.cloud.name is defined
        - nsxt.service_engine_groups is defined
        - vcenter_folders_uuids is defined
      tags:
        - serviceEngineGroup

    - name: bash workaround to configure static route in the controller - NSXT
      command: /bin/bash ../bash/alb_route.sh "{{ avi_username }}" "{{ avi_password }}" "{{ controllerPrivateIps | from_json | first }}" "{{ external_gw_ip }}" "{{ nsxt_segment_mgmt.cidr.split('/')[0] }}" "{{ nsxt_segment_mgmt.cidr.split('/')[1] }}"
      ignore_errors: no
      tags:
        - route
      when:
        - external_gw_ip is defined