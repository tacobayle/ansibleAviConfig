---
- hosts: localhost
  connection: local

  collections:
    - vmware.alb

  tasks:

    - name: Debug
      debug:
        msg: "{{ avi_credentials }}"
      tags:
        - debug

    - name: update default analytics profile with LOGS_PROCESSING_AUTO_SYNC_AND_INDEX for significant logs
      vmware.alb.avi_analyticsprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: System-Analytics-Profile
        client_log_config:
          significant_log_processing: "LOGS_PROCESSING_AUTO_SYNC_AND_INDEX"
          non_significant_log_processing: "LOGS_PROCESSING_AUTO_SYNC_AND_INDEX"


    - name: Create vsvip for dns VS - vCenter
      vmware.alb.avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        markers: "{{ item.0.markers | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.name + '.' + vcenter.domains | from_json | first | community.general.json_query('name') }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref }}"
              subnet:
                mask: "{{ item.cidr | split('/') | last }}"
                ip_addr:
                  type: "{{ item.type }}"
                  addr: "{{ item.cidr | split('/') | first }}"
      loop: "{{ vcenter.cloud.virtual_services | from_json | community.general.json_query('dns') }}"
      loop_control:
        label: "Creating VSVIP called {{ item.name }} in tenant {{ item.tenant_ref | default('admin') }}"
      when:
        - vcenter.cloud.name is defined
        - vcenter is defined
        - vcenter.cloud.virtual_services is defined
      tags:
        - vsvip_dns

    - name: Create vsvip for http VS - vCenter
      vmware.alb.avi_vsvip:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "vsvip-{{ item.name }}"
        markers: "{{ item.0.markers | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        dns_info:
          - fqdn: "{{ item.name + '.' + vcenter.domains | from_json | first }}"
        vip:
          - auto_allocate_ip: true
            ipam_network_subnet:
              network_ref: "/api/network/?name={{ item.network_ref }}"
              subnet:
                mask: "{{ item.cidr | split('/') | last }}"
                ip_addr:
                  type: "{{ item.type }}"
                  addr: "{{ item.cidr | split('/') | first }}"
      loop: "{{ vcenter.cloud.virtual_services | from_json | community.general.json_query('http') }}"
      loop_control:
        label: "Creating VSVIP called {{ item.name }} in tenant {{ item.tenant_ref | default('admin') }}"
      when:
        - vcenter.cloud.name is defined
        - vcenter.cloud.network_vip is defined
        - vcenter.domains is defined
      tags:
        - vsvip_http

    - name: Create a list of pools (vCenter)
      set_fact:
        vcenter_pools: "{{ vcenter_pools | default([]) + [item] }}"
      loop: "{{ vcenter.cloud.pools | from_json }}"
      when:
        - vcenter.cloud.pools is defined
        - vcenter.cloud.pools | from_json | length > 0

    - name: Create an empty list of pools (vCenter)
      set_fact:
        vcenter_pools: []
      when:
        - vcenter.cloud.pools is undefined

    - name: Create/update pool without server (vCenter)
      vmware.alb.avi_pool:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.0.name }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        tenant: "{{ item.0.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.0.tenant_ref | default('admin') }}"
        default_server_port: "{{ item.0.default_server_port }}"
        lb_algorithm: "{{ item.0.lb_algorithm | default(omit) }}"
        markers: "{{ item.0.markers | default(omit) }}"
        health_monitor_refs:
          - "/api/healthmonitor?name={{ item.0.health_monitor_refs | default('hm1') }}"
        servers:
          - ip:
              addr: "{{ item.1 }}"
              type: 'V4'
            hostname: "{{ item.1 }}"
      loop: "{{ vcenter_pools | subelements('avi_app_server_ips') }}"
      loop_control:
        label: "pool called {{ item.0.name }} configured in tenant {{ item.0.tenant_ref | default('admin') }}; server IP: {{ item.1 }}"
      when:
        - vcenter_pools is defined
        - vcenter_pools | length > 0
      tags:
        - pool

    - name: Create a list of pool group(s) (vCenter)
      set_fact:
        vcenter_pool_groups: "{{ vcenter_pool_groups | default([]) + [item] }}"
      loop: "{{ vcenter.cloud.pool_groups | from_json }}"
      when:
        - vcenter.cloud.pool_groups is defined
        - vcenter.cloud.pool_groups | from_json | length > 0

    - name: Create an empty list of pool group(s)  (vCenter)
      set_fact:
        vcenter_pool_groups: []
      when:
        - vcenter.cloud.pool_groups is undefined

    - name: Create/update pool group (vCenter)
      vmware.alb.avi_poolgroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.0.name }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        tenant: "{{ item.0.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.0.tenant_ref | default('admin') }}"
        members:
          - ratio: "{{ item.1.ratio | default(omit) }}"
            pool_ref: "/api/pool?name={{ item.1.name | default(omit) }}"
      loop: "{{ vcenter_pool_groups | subelements('members') }}"
      loop_control:
        label: "Configure pool group called {{ item.0.name }} in tenant {{ item.0.tenant_ref | default('admin') }}; pool name: {{ item.1.name }}"
      when:
        - vcenter_pool_groups is defined
        - vcenter.cloud.name is defined
      tags:
        - pool_group

    - name: Create DNS Virtualservice (based on vsvip) - vCenter
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-DNS') }}"
        network_profile_ref: "/api/networkprofile/?name={{ item.network_profile_ref | default('System-UDP-Per-Pkt') }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        services: "{{ item.services }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        analytics_policy:
          udf_log_throttle: 10
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 30
            throttle: 10
            enabled: true
          all_headers: true
      loop: "{{ vcenter.cloud.virtual_services | from_json | community.general.json_query('dns') }}"
      loop_control:
        label: "Configure Virtual Service called {{ item.name }} in tenant {{ item.tenant_ref | default('admin') }}"
      when:
        - vcenter.cloud.virtual_services is defined
        - vcenter.cloud.name is defined
      tags:
        - vs

    - name: Create HTTP Policy(ies) - vCenter
      community.network.avi_httppolicyset:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        http_request_policy: "{{ item.http_request_policy | default(omit) }}"
        http_response_policy: "{{ item.http_response_policy | default(omit) }}"
      loop: "{{ vcenter.cloud.httppolicyset | from_json }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - vcenter.cloud.httppolicyset is defined

    - name: Create HTTP Application Profile(s) - vCenter
      community.network.avi_applicationprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        type: "{{ item.type | default('APPLICATION_PROFILE_TYPE_HTTP') }}"
        http_profile: "{{ item.http_profile }}"
        dos_rl_profile: "{{ item.dos_rl_profile }}"
      loop: "{{ vcenter.cloud.applicationprofile | from_json }}"
      loop_control:
        label: "{{ item.name }}"
      when:
        - vcenter.cloud.applicationprofile is defined


    - name: Create HTTP Virtualservice (based on vsvip) - pool based - vCenter
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        enabled: "{{ item.enabled | default('true') }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-Secure-HTTP') }}"
        http_policies: "{{ item.http_policies | default(omit) }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
        pool_ref: "/api/pool?name={{ item.pool_ref | default(omit) }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        markers: "{{ item.markers | default(omit) }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        analytics_policy:
          udf_log_throttle: 0
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 0
            throttle: 0
            enabled: true
          all_headers: true
      loop: "{{ vcenter.cloud.virtual_services | from_json | community.general.json_query('http') }}"
      loop_control:
        label: "Create Virtual Service called {{ item.name }} in tenant {{ item.tenant_ref | default('admin') }}"
      when:
        - vcenter.cloud.virtual_services is defined
        - vcenter.cloud.name is defined
        - item.pool_ref is defined
      tags:
        - vs

    - name: Create HTTP Virtualservice (based on vsvip) - pool groups based - vCenter
      vmware.alb.avi_virtualservice:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ item.name }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        enabled: "{{ item.enabled | default('true') }}"
        tenant: "{{ item.tenant_ref | default('admin') }}"
        tenant_ref: "/api/tenant?name={{ item.tenant_ref | default('admin') }}"
        application_profile_ref: "/api/applicationprofile/?name={{ item.application_profile_ref | default('System-Secure-HTTP') }}"
        http_policies: "{{ item.http_policies | default(omit) }}"
        ssl_profile_ref: "/api/sslprofile/?name={{ item.ssl_profile_ref | default('System-Standard') }}"
        ssl_key_and_certificate_refs: "/api/sslkeyandcertificate/?name={{ item.ssl_key_and_certificate_refs | default('System-Default-Cert') }}"
        services: "{{ item.services }}"
        pool_group_ref: "/api/poolgroup?name={{ item.pool_group_ref | default(omit) }}"
        enable_rhi: "{{ item.enable_rhi | default('false') }}"
        vsvip_ref: "/api/vsvip/?name=vsvip-{{ item.name }}"
        se_group_ref:  "/api/serviceenginegroup/?name={{ item.se_group_ref | default('Default-Group') }}"
        analytics_policy:
          udf_log_throttle: 0
          metrics_realtime_update:
            duration: 0
            enabled: true
          significant_log_throttle: 0
          client_insights: NO_INSIGHTS
          full_client_logs:
            duration: 0
            throttle: 0
            enabled: true
          all_headers: true
      loop: "{{ vcenter.cloud.virtual_services | from_json | community.general.json_query('http') }}"
      loop_control:
        label: "Configure virtaul service called {{ item.name }} in tenant {{ item.tenant_ref | default('admin') }}"
      when:
        - vcenter.cloud.virtual_services is defined
        - vcenter.cloud.name is defined
        - item.pool_group_ref is defined
      tags:
        - vs


    - name: Update system config with first DNS VS - vCenter
      vmware.alb.avi_systemconfiguration:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        dns_virtualservice_refs: "/api/virtualservice/?name={{ vcenter.cloud.virtual_services | from_json | community.general.json_query('dns[0].name') }}"
      tags:
        - vs
        - dns
      when:
        - vcenter.cloud.virtual_services is defined

    - name: Wait for the First VS to be ready - vCenter
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: get
        timeout: 300
        path: virtualservice-inventory
        tenant: "{{ item.tenant_ref | default('admin') }}"
      register: register_status_vs
      until: register_status_vs.obj.results.0.runtime.oper_status.state == "OPER_UP"
      retries: 120
      delay: 40
      ignore_errors: yes
      tags:
        - vs