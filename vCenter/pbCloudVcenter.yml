---
- hosts: localhost
  connection: local
  gather_facts: no

  collections:
    - vmware.alb

  tasks:

    - name: Create Avi DNS provider Without domain names - vCenter
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name: "{{ vcenter.dns_profile_name | default('dns-avi-vcenter') }}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      tags:
        - dns

    - name: Update Avi DNS provider With domain names - vCenter
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op: add
        avi_api_update_method: patch
        internal_profile:
          dns_service_domain:
            - domain_name: "{{ item.name }}"
              pass_through: true
              record_ttl: 100
          ttl: 300
        name: "{{ vcenter.dns_profile_name | default('dns-avi-vcenter')}}"
        type: IPAMDNS_TYPE_INTERNAL_DNS
      loop: "{{ vcenter.domains | from_json }}"
      when:
        - vcenter.domains is defined
      tags:
        - dns

    - name: Defining variable vcenter_configuration - vCenter
      set_fact:
        vcenter_configuration:
          username: "{{ vsphere_username }}"
          password: "{{ vsphere_password }}"
          vcenter_url: "{{ vsphere_server }}"
          privilege: WRITE_ACCESS
          datacenter: "{{ vcenter.cloud.dc }}"
          use_content_lib: true
          content_lib:
            id: "{{ vcenter.cloud.content_lib.id }}"
            name: "{{ vcenter.cloud.content_lib.name }}"
      when:
        - vcenter.cloud.dc is defined
        - vcenter.cloud.content_lib.id is defined
        - vcenter.cloud.content_lib.name is defined
      tags:
        - cloud
        - vmw

    - name: Configure Avi Cloud - vCenter - with content library
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        name:  "{{ vcenter.cloud.name }}"
        vtype: CLOUD_VCENTER
        prefer_static_routes: true
        vcenter_configuration: "{{ vcenter_configuration }}"
        dhcp_enabled: "{{ vcenter.cloud.dhcp_enabled | default('true') }}"
      register: output_cloud_vcenter
      when:
        - vcenter.cloud.name is defined
        - vcenter_configuration is defined
      tags:
        - cloud
        - vmw

    - set_fact:
        cloud_vcenter_uuid: "{{ output_cloud_vcenter.obj.uuid }}"
      when:
        - output_cloud_vcenter is defined
      tags:
        - cloud
        - vmw

    - name: Wait for network sync for cloud to complete...
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "get"
        path: "cloudruntime/{{ cloud_vcenter_uuid }}"
        params:
          name: "{{ vcenter.cloud.name }}"
      register: cloudruntime
      until: cloudruntime.obj.network_sync_complete
      retries: 30
      delay: 10
      when:
        - vcenter.cloud.name is defined

    - name: Add cloud management network - vCenter
      vmware.alb.avi_api_session:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        http_method: "patch"
        path: '{{ "cloud/" + cloud_vcenter_uuid }}'
        data:
          replace:
            vcenter_configuration:
              management_network: "{{ '/api/vimgrnwruntime/?name=' +  item.name }}"
      loop: "{{ vcenter.cloud.networks | from_json }}"
      when:
        - vcenter.cloud.networks is defined
        - cloud_vcenter_uuid is defined
        - item.management | bool


#    - name: get Network details  - vCenter
#      vmware.alb.avi_api_session:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        http_method: get
#        timeout: 300
#        path: network
#        params:
#          page_size: -1
#      register: register_avi_api_session_networks
#      tags:
#        - cloud
#        - network
#        - ipamdns

    - name: Update Networks - vCenter - when DHCP is true (except mgmt network)
      vmware.alb.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        tenant_ref: "/api/tenant/?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.name }}"
        dhcp_enabled: "{{ item.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ item.exclude_discovered_subnets }}"
        configured_subnets:
          - prefix:
              mask: "{{ item.cidr | split('/') | last  }}"
              ip_addr:
                type: "{{ item.type }}"
                addr: "{{ item.cidr | split('/') | first  }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ item.type }}"
                    addr: "{{ item.avi_ipam_pool | split('-') | first  }}"
                  end:
                    type: "{{ item.type }}"
                    addr: "{{ item.avi_ipam_pool | split('-') | last  }}"
      loop: "{{ vcenter.cloud.networks | from_json }}"
      when:
        - vcenter.cloud.networks is defined
        - vcenter.cloud.name is defined
        - item.dhcp_enabled | bool
        - not item.management | bool
      tags:
        - cloud
        - network
        - ipamdns

    - name: Update Networks - vCenter - when DHCP is false
      vmware.alb.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        tenant_ref: "/api/tenant/?name={{ item.tenant_ref | default('admin') }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.name }}"
        dhcp_enabled: "{{ item.dhcp_enabled }}"
        exclude_discovered_subnets: "{{ item.exclude_discovered_subnets }}"
        configured_subnets:
          - prefix:
              mask: "{{ item.cidr | split('/') | last  }}"
              ip_addr:
                type: "{{ item.type }}"
                addr: "{{ item.cidr | split('/') | first  }}"
            static_ip_ranges:
              - range:
                  begin:
                    type: "{{ item.type }}"
                    addr: "{{ item.avi_ipam_pool | split('-') | first  }}"
                  end:
                    type: "{{ item.type }}"
                    addr: "{{ item.avi_ipam_pool | split('-') | last  }}"
      loop: "{{ vcenter.cloud.networks | from_json }}"
      when:
        - vcenter.cloud.networks is defined
        - vcenter.cloud.name is defined
        - not item.dhcp_enabled | bool
      tags:
        - cloud
        - network
        - ipamdns

    - set_fact:
        usable_networks: "{{ usable_networks | default([]) + [{ 'nw_ref': lookup('community.network.avi', avi_credentials=avi_credentials, obj_name=item, obj_type='network').uuid }] }}"
      loop: "{{ vcenter.ipam | from_json | community.general.json_query('networks') }}"
      when:
        - vcenter.ipam is defined


    - name: Create Avi IPAM - vCenter
      vmware.alb.avi_ipamdnsproviderprofile:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        internal_profile:
          usable_networks: "{{ usable_networks }}"
        name: "{{ vcenter.ipam_profile_name | default('ipam-avi-vcenter') }}"
        type: IPAMDNS_TYPE_INTERNAL
      when:
        - vcenter.ipam is defined
      tags:
        - ipam

    - name: Update Avi Cloud - vCenter - with CL
      vmware.alb.avi_cloud:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_update_method: patch
        avi_api_patch_op: add
        name: "{{ vcenter.cloud.name }}"
        vtype: CLOUD_VCENTER
        prefer_static_routes: true
        vcenter_configuration: "{{ vcenter_configuration }}"
        dhcp_enabled: "{{ vcenter.cloud.dhcp_enabled | default('true') }}"
        ipam_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vcenter.ipam_profile_name | default('ipam-avi-vcenter') }}"
        dns_provider_ref: "/api/ipamdnsproviderprofile/?name={{ vcenter.dns_profile_name | default('dns-avi-vcenter') }}"
      when:
        - vcenter.cloud.name is defined
        - vcenter_configuration is defined
        - vcenter.ipam is defined
      tags:
        - cloud
        - ipam
        - dns

    - name: Update Networks - vCenter
      vmware.alb.avi_network:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        name: "{{ item.name_ref }}"
        configured_subnets: "{{ item.configured_subnets }}"
      loop: "{{ vcenter.cloud.additional_subnets | from_json }}"
      loop_control:
        label: "Modifying network called {{ item.name_ref }}"
      when:
        - vcenter.cloud.additional_subnets is defined
        - vcenter.cloud.name is defined
      tags:
        - network


    - name: Modify/Creating SE group - vCenter
      vmware.alb.avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        avi_api_update_method: put
        name: "{{ item.name }}"
        ha_mode: "{{ item.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.min_scaleout_per_vs | default(omit) }}"
        max_scaleout_per_vs: "{{ item.0.max_scaleout_per_vs | default(omit) }}"
        max_cpu_usage: "{{ item.0.max_cpu_usage | default(omit) }}"
        min_cpu_usage: "{{ item.0.min_cpu_usage | default(omit) }}"
        max_vs_per_se: "{{ item.max_vs_per_se | default(omit) }}"
        vs_scaleout_timeout: "{{ item.0.vs_scaleout_timeout | default(omit) }}"
        buffer_se: "{{ item.buffer_se | default(omit) }}"
        extra_shared_config_memory: "{{ item.extra_shared_config_memory | default(omit) }}"
        vcenter_folder: "{{ item.vcenter_folder | default(vcenter_folder) | default(omit) }}"
        vcpus_per_se: "{{ item.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.auto_rebalance_criteria | default(omit) }}"
      loop: "{{ vcenter.cloud.service_engine_groups | from_json }}"
      loop_control:
        label: "Modifying SE group called {{ item.name }}"
      when:
        - vcenter.cloud.service_engine_groups is defined
        - vcenter.cloud.name is defined
      tags:
        - seg

    - name: Modify/Creating SE group per k8s cluster - vCenter
      vmware.alb.avi_serviceenginegroup:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        avi_api_update_method: put
        name: "{{ item.name }}"
        ha_mode: "{{ item.ha_mode | default('HA_MODE_SHARED') }}"
        min_scaleout_per_vs: "{{ item.min_scaleout_per_vs | default(omit) }}"
        max_scaleout_per_vs: "{{ item.0.max_scaleout_per_vs | default(omit) }}"
        max_cpu_usage: "{{ item.0.max_cpu_usage | default(omit) }}"
        min_cpu_usage: "{{ item.0.min_cpu_usage | default(omit) }}"
        max_vs_per_se: "{{ item.max_vs_per_se | default(omit) }}"
        vs_scaleout_timeout: "{{ item.0.vs_scaleout_timeout | default(omit) }}"
        buffer_se: "{{ item.buffer_se | default(omit) }}"
        extra_shared_config_memory: "{{ item.extra_shared_config_memory | default(omit) }}"
        vcenter_folder: "{{ item.vcenter_folder | default(vcenter_folder) | default(omit) }}"
        vcpus_per_se: "{{ item.vcpus_per_se | default(omit) }}"
        memory_per_se: "{{ item.memory_per_se | default(omit) }}"
        disk_per_se: "{{ item.disk_per_se | default(omit) }}"
        realtime_se_metrics: "{{ item.realtime_se_metrics | default(omit) }}"
        auto_rebalance: "{{ item.auto_rebalance | default(omit) }}"
        auto_rebalance_interval: "{{ item.auto_rebalance_interval | default(omit) }}"
        auto_rebalance_criteria: "{{ item.auto_rebalance_criteria | default(omit) }}"
      loop: "{{ vcenter.cloud.k8s_service_engine_groups | from_json }}"
      loop_control:
        label: "Modifying SE group called {{ item.name }}"
      when:
        - vcenter.cloud.k8s_service_engine_groups is defined
        - vcenter.cloud.name is defined
      tags:
        - seg

    - name: set vrf with BGP parameters
      vmware.alb.avi_vrfcontext:
        avi_credentials: "{{ avi_credentials }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        name: "{{ item.name }}"
        bgp_profile:
          hold_time: "{{ item.hold_time }}"
          ibgp: "{{ item.ibgp }}"
          keepalive_interval: "{{ item.keepalive_interval }}"
          local_as: "{{ item.local_as }}"
          peers: "{{ item.peers }}"
          routing_options: "{{ item.routing_options }}"
          send_community: "{{ item.send_community }}"
          shutdown: "{{ item.shutdown }}"
      loop: "{{ vcenter.cloud.contexts | from_json }}"
      loop_control:
        label: "Modifying context called {{ item.name }}"
      when:
        - vcenter.cloud.contexts is defined
        - vcenter.cloud.name is defined
      tags:
        - context



#    - name: Modify/Creating SE group - VMW - for K8S cluster
#      vmware.alb.avi_serviceenginegroup:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        cloud_ref: "/api/cloud/?name={{ vmw.name }}"
#        avi_api_update_method: put
#        name: "{{ item.serviceEngineGroup.name }}"
#        ha_mode: "{{ item.serviceEngineGroup.ha_mode | default('HA_MODE_SHARED') }}"
#        min_scaleout_per_vs: "{{ item.serviceEngineGroup.min_scaleout_per_vs | default(omit) }}"
#        max_vs_per_se: "{{ item.max_vs_per_se | default(omit) }}"
#        buffer_se: "{{ item.serviceEngineGroup.buffer_se | default(omit) }}"
#        extra_shared_config_memory: "{{ item.serviceEngineGroup.extra_shared_config_memory | default(omit) }}"
#        vcenter_folder: "{{ item.serviceEngineGroup.vcenter_folder | default(omit) }}"
#        vcpus_per_se: "{{ item.serviceEngineGroup.vcpus_per_se | default(omit) }}"
#        memory_per_se: "{{ item.serviceEngineGroup.memory_per_se | default(omit) }}"
#        disk_per_se: "{{ item.serviceEngineGroup.disk_per_se | default(omit) }}"
#        realtime_se_metrics: "{{ item.serviceEngineGroup.realtime_se_metrics | default(omit) }}"
#        auto_rebalance: "{{ item.serviceEngineGroup.auto_rebalance | default(omit) }}"
#        auto_rebalance_interval: "{{ item.serviceEngineGroup.auto_rebalance_interval | default(omit) }}"
#        auto_rebalance_criteria: "{{ item.serviceEngineGroup.auto_rebalance_criteria | default(omit) }}"
#        se_name_prefix: "{{ item.se_name_prefix | default(omit) }}"
#      loop: "{{ vmw.kubernetes.clusters }}"
#      loop_control:
#        label: "Modifying SE group called {{ item.serviceEngineGroup.name }}"
#      when:
#        - vmw.kubernetes.clusters is defined
#        - vmw.name is defined
#      tags:
#        - seg


    - name: bash workaround to configure static route in the controller - vCenter
      command: /bin/bash ../bash/alb_route.sh "{{ avi_username }}" "{{ avi_password }}" "{{ controllerPrivateIps | from_json | first }}" "{{ external_gw_ip }}" "{{ item.cidr | split('/') | first }}" "{{ item.cidr | split('/') | last }}"
      ignore_errors: no
      loop: "{{ vcenter.cloud.networks | from_json }}"
      when:
        - external_gw_ip is defined
        - vcenter.cloud.networks is defined
        - item.management | bool
      tags:
        - route

#    - name: Update vrf management with route to NSX ALB Controller
#      vmware.alb.avi_vrfcontext:
#        avi_credentials: "{{ avi_credentials | default(omit) }}"
#        api_context: "{{ avi_api_context | default(omit) }}"
#        avi_api_patch_op : add
#        avi_api_update_method: patch
#        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
#        name: "management"
#        static_routes:
#          - prefix:
#              ip_addr:
#                addr: "0.0.0.0"
#                type: "V4"
#              mask: "0"
#            next_hop:
#              addr: "{{ default_route_se_management }}"
#              type: "V4"
#            route_id: "1"
#      when:
#        - vcenter.cloud.name is defined
#        - default_route_se_management is defined
#      tags:
#        - route

    - name: Update vrf with static (or default) routes
      vmware.alb.avi_vrfcontext:
        avi_credentials: "{{ avi_credentials | default(omit) }}"
        api_context: "{{ avi_api_context | default(omit) }}"
        avi_api_patch_op : add
        avi_api_update_method: patch
        cloud_ref: "/api/cloud/?name={{ vcenter.cloud.name }}"
        name: "{{ item.vrf_name }}"
        static_routes:
          - prefix:
              ip_addr:
                addr: "{{ item.addr }}"
                type: "{{ item.type }}"
              mask: "{{ item.mask }}"
            next_hop:
              addr: "{{ item.next_hop }}"
              type: "{{ item.type }}"
            route_id: "1"
      loop: "{{ vcenter.cloud.static_routes | from_json }}"
      when:
        - vcenter.cloud.name is defined
        - vcenter.cloud.static_routes is defined
      tags:
        - cloud